{"version":3,"sources":["webpack:///src/app/modal/add-activie-modal/add-activie-modal.page.scss","webpack:///src/app/services/activities-api.service.ts","webpack:///src/app/modal/add-activie-modal/add-activie-modal.page.html","webpack:///src/app/modal/add-activie-modal/add-activie-modal.page.ts"],"names":["ActivitiesApiService","http","database","url","ref","a","onDisconnect","cancel","then","res","console","log","data","post","patch","activitie","Promise","resolve","reject","list","push","b","error","JSON","stringify","get","providedIn","Network","AddActivieModalPage","formBuilder","activitiService","modalController","isSubmitted","getStatus","getActivities","ionicForm","group","name","required","minLength","maxLength","description","superficie","coutmaindoeuvre","frequence","periode","besoinMateriel","coutMateriel","executant","status","networkListener","addListener","networkStatus","remove","e","date","Date","target","value","toISOString","substring","setValue","onlyself","valid","emp","postActivitie","subscribe","result","reset","postActivitieToFirebase","updateActivitiesStatus","id","err","getLastTenActivitie","activitiesTab","upadteActivitieFirebaseStatus","dismiss","dismissed","controls","selector","template"],"mappings":"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","file":"default~modal-add-activie-modal-add-activie-modal-module~pages-created-activitie-created-activitie-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2FkZC1hY3RpdmllLW1vZGFsL2FkZC1hY3RpdmllLW1vZGFsLnBhZ2Uuc2NzcyJ9 */\";","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { AngularFireDatabase } from \"@angular/fire/database\";\nimport { AngularFireStorage } from \"@angular/fire/storage\";\nimport firebase from \"firebase/app\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ActivitiesApiService {\n  url = \"http://localhost:3000/\";\n  constructor(private http: HttpClient, private database: AngularFireDatabase) {\n    let ref = firebase.database().ref(\"agriActivities\");\n    let a = ref\n      .onDisconnect()\n      .cancel()\n      .then((res) => {\n        console.log(\"we are offline!!\");\n      });\n  }\n\n  postActivitie(data) {\n    data[\"firebaseAdd\"] = false;\n    return this.http.post(this.url + `activities`, data);\n  }\n  upadteActivitieFirebaseStatus(data) {\n    // data[\"firebaseAdd\"] = false;\n    return this.http.patch(this.url + `activities/firebaseAdd`, data);\n  }\n\n  postActivitieToFirebase(activitie) {\n    console.log(activitie);\n    return new Promise((resolve, reject) => {\n      let database = this.database.list(\"agriActivities\");\n      database\n        .push(activitie)\n        .then((b) => {\n          resolve(b);\n        })\n        .catch((error) => {\n          reject(JSON.stringify(error));\n        });\n    });\n  }\n\n  getLastTenActivitie() {\n    return this.http.get(this.url + `activities`);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title></ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button fill=\\\"clear\\\" slot=\\\"icon-only\\\" (click)=\\\"dismiss()\\\">\\n        <ion-icon name=\\\"close-circle-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size-md=\\\"12\\\" size-lg=\\\"12\\\" size-xs=\\\"12\\\" size-sm=\\\"12\\\" size-xl=\\\"12\\\">\\n        <div class=\\\"cole\\\">\\n          <form [formGroup]=\\\"ionicForm\\\" (ngSubmit)=\\\"submitForm()\\\" novalidate>\\n            <div class=\\\"first\\\">\\n              <div class=\\\"divint\\\">\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">Nom</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer le nom de l'activitÃ© ici\\\"\\n                    formControlName=\\\"name\\\"\\n                    type=\\\"text\\\"\\n                  ></ion-input>\\n                </ion-item>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.name.errors?.required\\\"\\n                >\\n                  Name is required.\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.name.errors?.minlength\\\"\\n                >\\n                  Name should be min 2 chars long.\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.name.errors?.maxLength\\\"\\n                >\\n                  Name not should be max 20 chars long.\\n                </span>\\n              </div>\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">executant</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer l'information ici\\\"\\n                    formControlName=\\\"executant\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.executant.errors?.minlength\\\"\\n                >\\n                  Please provide valid executant .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.executant.errors?.maxLength\\\"\\n                >\\n                  Please provide valid executant .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.executant.errors?.required\\\"\\n                >\\n                  Entrer le executant.\\n                </span>\\n              </div>\\n\\n              <div class=\\\"divint\\\">\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">Superficie</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer la superficie ici\\\"\\n                    formControlName=\\\"superficie\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.superficie.errors?.minlength\\\"\\n                >\\n                  Please provide valid superficie .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.superficie.errors?.maxLength\\\"\\n                >\\n                  Please provide valid superficie .\\n                </span>\\n              </div>\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">Main d'oeuvre</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer le cout de la main d'oeuvre ici\\\"\\n                    formControlName=\\\"coutmaindoeuvre\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutmaindoeuvre.errors?.minlength\\\"\\n                >\\n                  Please provide valid price .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutmaindoeuvre.errors?.maxLength\\\"\\n                >\\n                  Please provide valid price .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutmaindoeuvre.errors?.required\\\"\\n                >\\n                  Entrer le cout de la main d'oeuvre.\\n                </span>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"second\\\">\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">FrÃ©quence</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer la frÃ©quence ici\\\"\\n                    formControlName=\\\"frequence\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.frequence.errors?.minlength\\\"\\n                >\\n                  Please provide valid frequence .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.frequence.errors?.maxLength\\\"\\n                >\\n                  Please provide valid frequence .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.frequence.errors?.required\\\"\\n                >\\n                  Entrer le frequence.\\n                </span>\\n              </div>\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">periode</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer la pÃ©riode ici\\\"\\n                    formControlName=\\\"periode\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.periode.errors?.minlength\\\"\\n                >\\n                  Please provide valid periode .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.periode.errors?.maxLength\\\"\\n                >\\n                  Please provide valid periode .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.periode.errors?.required\\\"\\n                >\\n                  Entrer la periode.\\n                </span>\\n              </div>\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">besoin materiel</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer le besoin ici\\\"\\n                    formControlName=\\\"besoinMateriel\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.besoinMateriel.errors?.minlength\\\"\\n                >\\n                  Please provide valid materiel .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.besoinMateriel.errors?.maxLength\\\"\\n                >\\n                  Please provide valid besoin materiel .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.besoinMateriel.errors?.required\\\"\\n                >\\n                  Entrer le besoin materiel.\\n                </span>\\n              </div>\\n              <div>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">cout materiel</ion-label>\\n                  <ion-input\\n                    placeholder=\\\"Entrer le cout ici\\\"\\n                    formControlName=\\\"coutMateriel\\\"\\n                    type=\\\"texte\\\"\\n                  ></ion-input>\\n                </ion-item>\\n\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutMateriel.errors?.minlength\\\"\\n                >\\n                  Please provide valid cout materiel .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutMateriel.errors?.maxLength\\\"\\n                >\\n                  Please provide valid cout materiel .\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.coutMateriel.errors?.required\\\"\\n                >\\n                  Entrer le cout materiel.\\n                </span>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"third\\\">\\n              <div class=\\\"divint\\\">\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-label position=\\\"floating\\\">Description</ion-label>\\n                  <ion-textarea\\n                    placeholder=\\\"faite une description ici\\\"\\n                    formControlName=\\\"description\\\"\\n                    type=\\\"text\\\"\\n                  ></ion-textarea>\\n                </ion-item>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.description.errors?.required\\\"\\n                >\\n                  description is required.\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.description.errors?.minlength\\\"\\n                >\\n                  Name should be min 5 chars long.\\n                </span>\\n                <span\\n                  class=\\\"error ion-padding\\\"\\n                  *ngIf=\\\"isSubmitted && errorControl.description.errors?.maxLength\\\"\\n                >\\n                  Name not should be max 1000 chars long.\\n                </span>\\n              </div>\\n            </div>\\n            <ion-row>\\n              <ion-col>\\n                <div class=\\\"ion-text-center\\\">\\n                  <ion-button type=\\\"submit\\\" color=\\\"danger\\\" size=\\\"small\\\"\\n                    >Submit</ion-button\\n                  >\\n                </div>\\n              </ion-col>\\n            </ion-row>\\n          </form>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivitiesApiService } from \"src/app/services/activities-api.service\";\nimport { Plugins, NetworkStatus, PluginListenerHandle } from \"@capacitor/core\";\nimport { AngularFireDatabase } from \"@angular/fire/database\";\nimport { AngularFireStorage } from \"@angular/fire/storage\";\nimport { ModalController } from \"@ionic/angular\";\nimport { InstructionPage } from \"../../modal/instruction/instruction.page\";\nimport * as firebsase from \"firebase\";\nconst { Network } = Plugins;\n@Component({\n  selector: \"app-add-activie-modal\",\n  templateUrl: \"./add-activie-modal.page.html\",\n  styleUrls: [\"./add-activie-modal.page.scss\"],\n})\nexport class AddActivieModalPage implements OnInit {\n  ionicForm: FormGroup;\n  // defaultDate = \"1987-06-30\";\n  isSubmitted = false;\n  networkStatus: NetworkStatus;\n  networkListener: PluginListenerHandle;\n  activitiesTab: any;\n  constructor(\n    public formBuilder: FormBuilder,\n    public activitiService: ActivitiesApiService,\n    private database: AngularFireDatabase,\n    public modalController: ModalController\n  ) {\n    this.getStatus();\n    this.getActivities();\n  }\n\n  async ngOnInit() {\n    this.ionicForm = this.formBuilder.group({\n      name: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(20),\n        ],\n      ],\n      description: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(5),\n          Validators.maxLength(1000),\n        ],\n      ],\n      superficie: [\n        \"\",\n        [\n          // Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(100),\n          // Validators.pattern(\"[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,3}$\"),\n        ],\n      ],\n      // dob: [this.defaultDate],\n      // mobile: [\"\", [Validators.required, Validators.pattern(\"^[0-9]+$\")]],\n      coutmaindoeuvre: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(1000),\n          //  Validators.pattern(\"^[0-9]+$\"),\n        ],\n      ],\n      frequence: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(1000),\n        ],\n      ],\n      periode: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(5),\n          Validators.maxLength(1000),\n        ],\n      ],\n      besoinMateriel: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(1000),\n        ],\n      ],\n      coutMateriel: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(1000),\n        ],\n      ],\n      executant: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(1000),\n        ],\n      ],\n    });\n  }\n  async getStatus() {\n    console.log(status);\n    console.log(\"hello status\");\n    this.networkListener = Network.addListener(\n      \"networkStatusChange\",\n      (status) => {\n        console.log(status);\n        this.networkStatus = status;\n      }\n    );\n    this.networkStatus = await Network.getStatus();\n  }\n  ngOnDestroy() {\n    this.networkListener.remove();\n  }\n  getDate(e) {\n    let date = new Date(e.target.value).toISOString().substring(0, 10);\n    this.ionicForm.get(\"dob\").setValue(date, {\n      onlyself: true,\n    });\n  }\n\n  get errorControl() {\n    return this.ionicForm.controls;\n  }\n\n  submitForm() {\n    this.isSubmitted = true;\n    if (!this.ionicForm.valid) {\n      console.log(\"Please provide all the required values!\");\n      return false;\n    } else {\n      console.log(this.ionicForm.value);\n      let emp = this.ionicForm.value;\n      this.activitiService.postActivitie(this.ionicForm.value).subscribe(\n        (result) => {\n          console.log(result[\"activitie\"]);\n          this.isSubmitted = false;\n          this.ionicForm.reset();\n          this.getActivities();\n          this.activitiService\n            .postActivitieToFirebase(result[\"activitie\"])\n            .then((res) => {\n              console.log(res);\n              this.updateActivitiesStatus({\n                id: result[\"activitie\"][\"_id\"],\n                status: true,\n              });\n            })\n            .catch((err) => {\n              console.log(err);\n              this.updateActivitiesStatus({\n                id: result[\"activitie\"][\"_id\"],\n                status: false,\n              });\n            });\n        },\n        (err) => {\n          console.log(err);\n        }\n      );\n    }\n  }\n  getActivities() {\n    this.activitiService.getLastTenActivitie().subscribe((data) => {\n      console.log(data);\n\n      this.activitiesTab = data;\n      // this.activitiesTab = this.activitiesTab.reverse();\n    });\n  }\n  updateActivitiesStatus(data) {\n    this.activitiService\n      .upadteActivitieFirebaseStatus(data)\n      .subscribe((data) => {\n        console.log(data);\n      });\n  }\n  dismiss() {\n    // using the injected ModalController this page\n    // can \"dismiss\" itself and optionally pass back data\n    this.modalController.dismiss({\n      dismissed: true,\n    });\n  }\n}\n"]}